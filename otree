#!/usr/bin/env python
"""
This script takes the role of what ``manage.py`` usually does in a django
project.  We have this script simply there in order to have a nicer name for it.
``./otree runserver`` is just a lot cooler than ``python manage.py runserver``.

However this has one drawback. There are commands (namely celery) that won't
work if the command is not run from ``manage.py``.Also other tools like PyCharm
sometimes expect to have a ``manage.py`` around. So we keep the ``manage.py``
next to this ``./otree`` script to support more tools.
"""

import os
import platform
import sys


if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")

    from django.core.management import execute_from_command_line

    # Workaround for windows. Celery (more precicely the billard library) will
    # complain if the script you are using to initialize celery does not end
    # on '.py'. That's why we require a manage.py file to be around.
    if platform.system() == 'Windows':
        scriptdir = os.path.relpath(os.path.dirname(__file__))
        managepy = os.path.join(scriptdir, 'manage.py')
        if not os.path.exists(managepy):
            sys.stderr.write(
                "It seems that you do not have a file called 'manage.py' next "
                "to the ./otree script you just called. This is a requirement "
                "when using otree on windows.")
            sys.stderr.write("\n\n")
            sys.stderr.write(
                "Please download the file {url} and save it as 'manage.py' in "
                "the directory {directory}".format(
                    url="https://raw.githubusercontent.com/oTree-org/oTree/master/manage.py",
                    directory=scriptdir))
            sys.exit(1)
        sys.argv[0] = 'manage.py'

    execute_from_command_line(sys.argv)
